name: ELMS CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKERHUB_USERNAME: dilshan019
  SERVER_HOST: 16.170.210.109
  SERVER_USER: ubuntu
  
jobs:
  # Job 1: Test and Build
  test-build:
    runs-on: ubuntu-latest
    name: Test & Build
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: empdb_test
          MYSQL_USER: elms_user
          MYSQL_PASSWORD: elms_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Frontend Tests
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run Frontend Lint
      working-directory: ./frontend
      run: npm run lint

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    # Backend Tests
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h 127.0.0.1 --silent; then
            break
          fi
          echo 'MySQL is unavailable - sleeping'
          sleep 1
        done
        
        if [ "$i" = 0 ]; then
          echo 'MySQL is still unavailable - failing'
          exit 1
        fi
        echo 'MySQL is up - continuing'

    - name: Run Backend Tests
      working-directory: ./ELMS
      run: |
        chmod +x ./mvnw
        ./mvnw clean test -Dspring.profiles.active=test \
          -Dspring.datasource.url=jdbc:mysql://localhost:3306/empdb_test \
          -Dspring.datasource.username=elms_user \
          -Dspring.datasource.password=elms_password

    - name: Build Backend JAR
      working-directory: ./ELMS
      run: ./mvnw clean package -DskipTests

    - name: Upload Backend JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/*.jar

    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Job 2: Docker Build and Push
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/

    - name: Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./ELMS
        file: ./ELMS/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          ${{ env.DOCKERHUB_USERNAME }}/elms-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to EC2
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Starting ELMS deployment..."
          
          # Stop and remove existing containers
          echo "Stopping existing containers..."
          docker stop elms-backend elms-frontend elms-database || true
          docker rm elms-backend elms-frontend elms-database || true
          
          # Remove old images to free space
          echo "Cleaning up old images..."
          docker image prune -f
          
          # Create network if it doesn't exist
          docker network create elms-network || true
          
          # Start MySQL Database
          echo "Starting MySQL database..."
          docker run -d \
            --name elms-database \
            --network elms-network \
            -e MYSQL_ROOT_PASSWORD=rootpassword \
            -e MYSQL_DATABASE=empdb \
            -e MYSQL_USER=elms_user \
            -e MYSQL_PASSWORD=elms_password \
            -p 3306:3306 \
            mysql:8.0
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if docker exec elms-database mysqladmin ping -h localhost --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done
          
          # Pull latest images
          echo "Pulling latest Docker images..."
          docker pull ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          docker pull ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          
          # Start Backend
          echo "Starting backend container..."
          docker run -d \
            --name elms-backend \
            --network elms-network \
            -e SPRING_PROFILES_ACTIVE=production \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://elms-database:3306/empdb \
            -e SPRING_DATASOURCE_USERNAME=elms_user \
            -e SPRING_DATASOURCE_PASSWORD=elms_password \
            -p 8080:8080 \
            ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          
          # Start Frontend  
          echo "Starting frontend container..."
          docker run -d \
            --name elms-frontend \
            --network elms-network \
            -p 80:80 \
            ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          
          # Health checks
          echo "Performing health checks..."
          sleep 30
          
          # Check backend health
          backend_healthy="false"
          for i in {1..10}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "✅ Backend health check passed"
              backend_healthy="true"
              break
            fi
            echo "Backend health check attempt $i/10..."
            sleep 10
          done
          
          # Check frontend
          frontend_healthy="false"
          if curl -f http://localhost > /dev/null 2>&1; then
            echo "✅ Frontend health check passed"
            frontend_healthy="true"
          else
            echo "❌ Frontend health check failed"
          fi
          
          # Final status
          if [ "$backend_healthy" == "true" ] && [ "$frontend_healthy" == "true" ]; then
            echo "🎉 All health checks passed! ELMS is live at http://${{ env.SERVER_HOST }}"
            echo "🔗 Backend API: http://${{ env.SERVER_HOST }}:8080"
            echo "🔗 Frontend: http://${{ env.SERVER_HOST }}"
          else
            echo "❌ Some health checks failed"
            exit 1
          fi