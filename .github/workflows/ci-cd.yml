name: ELMS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: dilshan019
  BACKEND_IMAGE_NAME: elms-backend
  FRONTEND_IMAGE_NAME: elms-frontend
  
jobs:
  # Backend Testing and Build
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: empdb
          MYSQL_USER: elms_user
          MYSQL_PASSWORD: elms_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h 127.0.0.1 --silent; then
            break
          fi
          echo 'MySQL is unavailable - sleeping'
          sleep 1
        done

    - name: Run Backend Tests
      working-directory: ./ELMS
      run: |
        mvn clean test
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: empdb
        DB_USERNAME: elms_user
        DB_PASSWORD: elms_password

    - name: Build Backend
      working-directory: ./ELMS
      run: mvn clean package -DskipTests

    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/*.jar

  # Frontend Testing and Build
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/

    - name: Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for Backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ELMS
        file: ./ELMS/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to AWS EC2
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
        USER_NAME: ubuntu
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Copy deployment script to EC2
        scp -o StrictHostKeyChecking=no -i private_key ./aws-docker-deploy.sh ${USER_NAME}@${HOSTNAME}:~/
        
        # Execute deployment on EC2
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          chmod +x ~/aws-docker-deploy.sh
          sudo ~/aws-docker-deploy.sh
        '

    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 60
        
        # Check if backend is responding
        curl -f http://${{ secrets.EC2_HOSTNAME }}:8080/actuator/health || exit 1
        
        # Check if frontend is responding  
        curl -f http://${{ secrets.EC2_HOSTNAME }}:3000 || exit 1
        
        echo "‚úÖ Deployment successful!"

  # Notify deployment status
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ ELMS deployment completed successfully!"
        echo "Backend: http://${{ secrets.EC2_HOSTNAME }}:8080"
        echo "Frontend: http://${{ secrets.EC2_HOSTNAME }}:3000"

    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå ELMS deployment failed!"
        echo "Please check the logs for more details."