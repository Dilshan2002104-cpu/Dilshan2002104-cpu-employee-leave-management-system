name: ELMS CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKERHUB_USERNAME: dilshan019
  SERVER_HOST: 16.170.210.109
  SERVER_USER: ubuntu
  
jobs:
  # Job 1: Test and Build
  test-build:
    runs-on: ubuntu-latest
    name: Test & Build
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: empdb_test
          MYSQL_USER: elms_user
          MYSQL_PASSWORD: elms_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Frontend Tests
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run Frontend Lint
      working-directory: ./frontend
      run: npm run lint

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    # Backend Tests
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h 127.0.0.1 --silent; then
            break
          fi
          echo 'MySQL is unavailable - sleeping'
          sleep 1
        done
        
        if [ "$i" = 0 ]; then
          echo 'MySQL is still unavailable - failing'
          exit 1
        fi
        echo 'MySQL is up - continuing'

    - name: Run Backend Tests
      working-directory: ./ELMS
      run: |
        chmod +x ./mvnw
        ./mvnw clean test -Dspring.profiles.active=test \
          -Dspring.datasource.url=jdbc:mysql://localhost:3306/empdb_test \
          -Dspring.datasource.username=elms_user \
          -Dspring.datasource.password=elms_password

    - name: Build Backend JAR
      working-directory: ./ELMS
      run: ./mvnw clean package -DskipTests

    - name: Upload Backend JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/*.jar

    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Job 2: Docker Build and Push
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/

    - name: Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./ELMS
        file: ./ELMS/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          ${{ env.DOCKERHUB_USERNAME }}/elms-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to EC2
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Starting ELMS deployment..."
          
          # Stop and remove existing containers (but keep MySQL)
          echo "Stopping existing containers..."
          docker stop elms-backend elms-frontend || true
          docker rm elms-backend elms-frontend || true
          
          # Remove old images to free space
          echo "Cleaning up old images..."
          docker image prune -f
          
          # Check for existing MySQL containers and get the correct name
          echo "Checking for existing MySQL services..."
          MYSQL_CONTAINER=$(docker ps --format "{{.Names}}" | grep -E "(mysql|elms-database|elms-mysql)" | head -1)
          
          if [ ! -z "$MYSQL_CONTAINER" ]; then
            echo "✅ Found existing MySQL container: $MYSQL_CONTAINER"
            MYSQL_HOST="$MYSQL_CONTAINER"
            
            # Create network if it doesn't exist
            if ! docker network ls | grep -q elms-network; then
              echo "Creating elms-network..."
              docker network create elms-network
            else
              echo "elms-network already exists"
            fi
            
            # Connect existing MySQL container to elms-network if not already connected
            echo "Connecting MySQL container to elms-network..."
            docker network connect elms-network $MYSQL_CONTAINER 2>/dev/null || echo "MySQL already connected to network or connection failed"
            
            # Ensure database exists in the running MySQL container
            echo "Ensuring empdb database and user exist..."
            docker exec $MYSQL_CONTAINER mysql -u root -prootpassword -e "
              CREATE DATABASE IF NOT EXISTS empdb;
              CREATE USER IF NOT EXISTS 'elms_user'@'%' IDENTIFIED BY 'elms_password';
              GRANT ALL PRIVILEGES ON empdb.* TO 'elms_user'@'%';
              FLUSH PRIVILEGES;
            " 2>/dev/null || \
            docker exec $MYSQL_CONTAINER mysql -u root -e "
              CREATE DATABASE IF NOT EXISTS empdb;
              CREATE USER IF NOT EXISTS 'elms_user'@'%' IDENTIFIED BY 'elms_password';
              GRANT ALL PRIVILEGES ON empdb.* TO 'elms_user'@'%';
              FLUSH PRIVILEGES;
            " 2>/dev/null || \
            echo "⚠️  Could not create database/user. Continuing with existing setup..."
            
          else
            echo "No existing MySQL found. Starting new MySQL container..."
            # Create network if it doesn't exist
            if ! docker network ls | grep -q elms-network; then
              echo "Creating elms-network..."
              docker network create elms-network
            else
              echo "elms-network already exists"
            fi
            
            # Start MySQL Database
            docker run -d \
              --name elms-mysql \
              --network elms-network \
              -e MYSQL_ROOT_PASSWORD=rootpassword \
              -e MYSQL_DATABASE=empdb \
              -e MYSQL_USER=elms_user \
              -e MYSQL_PASSWORD=elms_password \
              -p 3306:3306 \
              mysql:8.0
            
            MYSQL_HOST="elms-mysql"
            
            # Wait for MySQL to be ready
            echo "Waiting for MySQL to be ready..."
            for i in {1..30}; do
              if docker exec elms-mysql mysqladmin ping -h localhost --silent; then
                echo "MySQL is ready!"
                break
              fi
              echo "Waiting for MySQL... ($i/30)"
              sleep 2
            done
          fi
          
          # Ensure network exists before starting containers
          if ! docker network ls | grep -q elms-network; then
            echo "Creating elms-network..."
            docker network create elms-network
          else
            echo "elms-network already exists"
          fi
          
          # Pull latest images
          echo "Pulling latest Docker images..."
          docker pull ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          docker pull ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          
          # Start Backend with the correct MySQL host
          echo "Starting backend container with MySQL host: $MYSQL_HOST"
          
          # Try with container name first, fallback to localhost if network issues
          docker run -d \
            --name elms-backend \
            --network elms-network \
            -e SPRING_PROFILES_ACTIVE=production \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://$MYSQL_HOST:3306/empdb \
            -e SPRING_DATASOURCE_USERNAME=elms_user \
            -e SPRING_DATASOURCE_PASSWORD=elms_password \
            -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
            -p 8080:8080 \
            ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          
          # Check if backend started successfully, if not try with localhost
          sleep 5
          if docker ps | grep -q "elms-backend.*Up"; then
            echo "✅ Backend container started successfully"
          else
            echo "🔄 Backend failed to start, checking logs and trying with localhost..."
            docker logs elms-backend --tail 10 2>/dev/null || echo "No logs available yet"
            docker rm elms-backend || true
            
            docker run -d \
              --name elms-backend \
              --network elms-network \
              --add-host=host.docker.internal:host-gateway \
              -e SPRING_PROFILES_ACTIVE=production \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/empdb \
              -e SPRING_DATASOURCE_USERNAME=elms_user \
              -e SPRING_DATASOURCE_PASSWORD=elms_password \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
              -p 8080:8080 \
              ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          fi
          
          # Start Frontend  
          echo "Starting frontend container..."
          docker run -d \
            --name elms-frontend \
            --network elms-network \
            -p 80:80 \
            ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          
          # Health checks with appropriate timing
          echo "Performing health checks..."
          echo "Waiting for containers to initialize..."
          sleep 30
          
          # Check if backend container is running first
          if ! docker ps | grep -q elms-backend; then
            echo "❌ Backend container is not running! Checking logs..."
            docker logs elms-backend --tail 20
            exit 1
          fi
          
          # Check backend health with fewer but longer waits
          backend_healthy="false"
          for i in {1..8}; do
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "✅ Backend health check passed"
              backend_healthy="true"
              break
            elif curl -f http://localhost:8080/ > /dev/null 2>&1; then
              echo "✅ Backend is responding (alternative check)"
              backend_healthy="true"
              break
            fi
            echo "Backend health check attempt $i/8..."
            sleep 15
          done
          
          # Check backend logs if health check fails
          if [ "$backend_healthy" == "false" ]; then
            echo "🔍 Backend health check failed. Checking logs..."
            docker logs elms-backend --tail 30
          fi
          
          # Check frontend
          frontend_healthy="false"
          if curl -f http://localhost > /dev/null 2>&1; then
            echo "✅ Frontend health check passed"
            frontend_healthy="true"
          else
            echo "❌ Frontend health check failed"
            echo "🔍 Frontend logs:"
            docker logs elms-frontend --tail 10
          fi
          
          # Show running containers for debugging
          echo "📊 Current container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Show network information
          echo "🌐 Network connections:"
          docker network ls
          docker network inspect elms-network | grep -A 10 "Containers" || true
          
          # Final status
          if [ "$backend_healthy" == "true" ] && [ "$frontend_healthy" == "true" ]; then
            echo "🎉 All health checks passed! ELMS is live at http://${{ env.SERVER_HOST }}"
            echo "🔗 Backend API: http://${{ env.SERVER_HOST }}:8080"
            echo "🔗 Frontend: http://${{ env.SERVER_HOST }}"
          else
            echo "⚠️  Deployment completed but some health checks failed"
            echo "🔗 You can still try accessing:"
            echo "   - Backend API: http://${{ env.SERVER_HOST }}:8080"
            echo "   - Frontend: http://${{ env.SERVER_HOST }}"
            echo "📝 Check the logs above for troubleshooting"
          fi