name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: dilshan019

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      release_version: ${{ steps.version.outputs.version }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        if [ $(git tag --list | wc -l) -gt 1 ]; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        fi
        
        # Save changelog to file
        echo "$CHANGELOG" > CHANGELOG.md
        
        # Set output for later use
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "changelog<<$EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: ELMS ${{ steps.version.outputs.version }}
        body: |
          ## 🚀 ELMS Release ${{ steps.version.outputs.version }}
          
          ### 📋 Changes in this release:
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🐳 Docker Images:
          - **Backend:** `dilshan019/elms-backend:${{ steps.version.outputs.version }}`
          - **Frontend:** `dilshan019/elms-frontend:${{ steps.version.outputs.version }}`
          
          ### 📥 Deployment:
          ```bash
          # Pull the latest images
          docker pull dilshan019/elms-backend:${{ steps.version.outputs.version }}
          docker pull dilshan019/elms-frontend:${{ steps.version.outputs.version }}
          
          # Or use docker-compose with the specific version
          export ELMS_VERSION=${{ steps.version.outputs.version }}
          docker-compose up -d
          ```
          
          ### 🔗 Quick Links:
          - [Backend Image on DockerHub](https://hub.docker.com/r/dilshan019/elms-backend)
          - [Frontend Image on DockerHub](https://hub.docker.com/r/dilshan019/elms-frontend)
          - [Full Documentation](./README.md)
        draft: false
        prerelease: false

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: create-release

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: empdb
          MYSQL_USER: elms_user
          MYSQL_PASSWORD: elms_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h 127.0.0.1 --silent; then
            break
          fi
          sleep 1
        done

    - name: Build and Test Backend
      working-directory: ./ELMS
      run: |
        mvn clean package
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: empdb
        DB_USERNAME: elms_user
        DB_PASSWORD: elms_password

    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Upload Backend JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar-${{ needs.create-release.outputs.release_version }}
        path: ELMS/target/*.jar

    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist-${{ needs.create-release.outputs.release_version }}
        path: frontend/dist/

  # Build and Push Release Images
  release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Backend JAR
      uses: actions/download-artifact@v4
      with:
        name: backend-jar-${{ needs.create-release.outputs.release_version }}
        path: ELMS/target/

    - name: Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist-${{ needs.create-release.outputs.release_version }}
        path: frontend/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./ELMS
        file: ./ELMS/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/elms-backend:${{ needs.create-release.outputs.release_version }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/elms-backend:latest
        labels: |
          org.opencontainers.image.title=ELMS Backend
          org.opencontainers.image.description=Employee Leave Management System Backend
          org.opencontainers.image.version=${{ needs.create-release.outputs.release_version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/elms-frontend:${{ needs.create-release.outputs.release_version }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/elms-frontend:latest
        labels: |
          org.opencontainers.image.title=ELMS Frontend
          org.opencontainers.image.description=Employee Leave Management System Frontend
          org.opencontainers.image.version=${{ needs.create-release.outputs.release_version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Update Release with Assets
  update-release:
    name: Update Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test, release-images]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Backend JAR
      uses: actions/download-artifact@v4
      with:
        name: backend-jar-${{ needs.create-release.outputs.release_version }}
        path: ./artifacts/

    - name: Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist-${{ needs.create-release.outputs.release_version }}
        path: ./artifacts/frontend/

    - name: Create deployment package
      run: |
        # Create a deployment package with docker-compose and scripts
        mkdir -p deployment-package
        cp docker-compose.yml deployment-package/
        cp aws-docker-deploy.sh deployment-package/
        cp -r .env.example deployment-package/ || true
        
        # Create README for deployment
        cat > deployment-package/README.md << EOF
        # ELMS Deployment Package
        
        This package contains everything needed to deploy ELMS ${{ needs.create-release.outputs.release_version }}.
        
        ## Quick Start
        1. Copy the files to your server
        2. Update the environment variables in docker-compose.yml
        3. Run: \`docker-compose up -d\`
        
        ## Files included:
        - docker-compose.yml: Service definitions
        - aws-docker-deploy.sh: AWS deployment script
        - README.md: This file
        EOF
        
        # Create zip file
        cd deployment-package
        zip -r ../elms-deployment-${{ needs.create-release.outputs.release_version }}.zip .
        cd ..

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./elms-deployment-${{ needs.create-release.outputs.release_version }}.zip
        asset_name: elms-deployment-${{ needs.create-release.outputs.release_version }}.zip
        asset_content_type: application/zip