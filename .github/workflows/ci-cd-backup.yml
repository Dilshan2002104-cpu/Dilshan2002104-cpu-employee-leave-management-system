name: ELMS CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKERHUB_USERNAME: dilshan019
  SERVER_HOST: 16.170.210.109
  SERVER_USER: ubuntu
  
jobs:
  # Job 1: Test and Build
  test-build:
    runs-on: ubuntu-latest
    name: Test & Build
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: empdb_test
          MYSQL_USER: elms_user
          MYSQL_PASSWORD: elms_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Frontend Tests
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Frontend Lint
      working-directory: ./frontend
      run: npm run lint

    - name: Frontend Build
      working-directory: ./frontend
      run: npm run build

    # Backend Tests
    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -prootpassword --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Attempt $i: MySQL not ready yet, waiting..."
          sleep 2
        done

    - name: Setup Test Database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword -e "CREATE DATABASE IF NOT EXISTS empdb_test;"
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword -e "GRANT ALL PRIVILEGES ON empdb_test.* TO 'elms_user'@'%';"
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword -e "FLUSH PRIVILEGES;"

    - name: Make Maven Wrapper Executable
      working-directory: ./ELMS
      run: chmod +x ./mvnw

    - name: Backend Tests
      working-directory: ./ELMS
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/empdb_test
        SPRING_DATASOURCE_USERNAME: elms_user
        SPRING_DATASOURCE_PASSWORD: elms_password
      run: ./mvnw clean test

  # Job 2: Build and Push Docker Images
  docker-build:
    needs: test-build
    runs-on: ubuntu-latest
    name: Build & Push Docker Images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./ELMS
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          ${{ env.DOCKERHUB_USERNAME }}/elms-backend:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to EC2
  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    name: Deploy to EC2
    environment: production

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "üöÄ Starting ELMS deployment..."
          
          # Ensure Docker network exists
          docker network inspect elms-network >/dev/null 2>&1 || docker network create elms-network
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker stop elms-frontend elms-backend || true
          docker rm elms-frontend elms-backend || true
          
          # Connect database to network
          docker network connect elms-network elms-database || echo "Database already connected"
          
          # Pull latest images
          echo "Pulling latest Docker images..."
          docker pull ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          docker pull ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          
          # Start backend container
          echo "Starting backend container..."
          docker run -d \
            --name elms-backend \
            --network elms-network \
            -e SPRING_PROFILES_ACTIVE=production \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://elms-database:3306/empdb \
            -e SPRING_DATASOURCE_USERNAME=elms_user \
            -e SPRING_DATASOURCE_PASSWORD=elms_password \
            -p 8080:8080 \
            --restart unless-stopped \
            ${{ env.DOCKERHUB_USERNAME }}/elms-backend:latest
          
          # Start frontend container
          echo "Starting frontend container..."
          docker run -d \
            --name elms-frontend \
            --network elms-network \
            -p 80:80 \
            --restart unless-stopped \
            ${{ env.DOCKERHUB_USERNAME }}/elms-frontend:latest
          
          # Clean up old images
          docker image prune -f
          
          echo "‚úÖ ELMS deployment completed!"

    - name: Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "üîç Verifying deployment..."
          
          # Wait for containers to start
          sleep 30
          
          # Check container status
          echo "Container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Backend health check
          echo "Testing backend health..."
          for i in {1..5}; do
            if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ Backend health check passed"
              backend_healthy=true
              break
            else
              echo "‚è≥ Backend not ready yet (attempt $i/5), waiting..."
              sleep 15
            fi
          done
          
          # Frontend health check
          echo "Testing frontend health..."
          for i in {1..3}; do
            if curl -f -s http://localhost/ > /dev/null 2>&1; then
              echo "‚úÖ Frontend health check passed"
              frontend_healthy=true
              break
            else
              echo "‚è≥ Frontend not ready yet (attempt $i/3), waiting..."
              sleep 10
            fi
          done
          
          if [ "$backend_healthy" == "true" ] && [ "$frontend_healthy" == "true" ]; then
            echo "üéâ All health checks passed! ELMS is live at http://${{ env.SERVER_HOST }}"
          else
            echo "‚ùå Some health checks failed"
            exit 1
          fi
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h 127.0.0.1 --silent; then
            break
          fi
          echo 'MySQL is unavailable - sleeping'
          sleep 1
        done

    - name: Run Backend Tests
      working-directory: ./ELMS
      run: |
        mvn clean test
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: empdb
        DB_USERNAME: elms_user
        DB_PASSWORD: elms_password

    - name: Build Backend
      working-directory: ./ELMS
      run: mvn clean package -DskipTests

    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/*.jar

  # Frontend Testing and Build
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Backend Artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: ELMS/target/

    - name: Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for Backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ELMS
        file: ./ELMS/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to AWS EC2
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
        USER_NAME: ubuntu
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Copy deployment script to EC2
        scp -o StrictHostKeyChecking=no -i private_key ./aws-docker-deploy.sh ${USER_NAME}@${HOSTNAME}:~/
        
        # Execute deployment on EC2
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          chmod +x ~/aws-docker-deploy.sh
          sudo ~/aws-docker-deploy.sh
        '

    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 60
        
        # Check if backend is responding
        curl -f http://${{ secrets.EC2_HOSTNAME }}:8080/actuator/health || exit 1
        
        # Check if frontend is responding  
        curl -f http://${{ secrets.EC2_HOSTNAME }}:3000 || exit 1
        
        echo "‚úÖ Deployment successful!"

  # Notify deployment status
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ ELMS deployment completed successfully!"
        echo "Backend: http://${{ secrets.EC2_HOSTNAME }}:8080"
        echo "Frontend: http://${{ secrets.EC2_HOSTNAME }}:3000"

    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå ELMS deployment failed!"
        echo "Please check the logs for more details."