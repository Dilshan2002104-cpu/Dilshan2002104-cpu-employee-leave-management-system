name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  # Code Quality Check
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Backend Quality Checks
    - name: Backend - Maven Verify
      working-directory: ./ELMS
      run: mvn clean verify -DskipTests

    - name: Backend - Check Style
      working-directory: ./ELMS
      run: mvn checkstyle:check || true

    # Frontend Quality Checks
    - name: Frontend - Install Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Frontend - ESLint Check
      working-directory: ./frontend
      run: npm run lint

    - name: Frontend - Build Check
      working-directory: ./frontend
      run: npm run build

    # Security Scanning
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ELMS'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: Upload OWASP Results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # Test Coverage
  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: empdb
          MYSQL_USER: elms_user
          MYSQL_PASSWORD: elms_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h 127.0.0.1 --silent; then
            break
          fi
          sleep 1
        done

    - name: Run Tests with Coverage
      working-directory: ./ELMS
      run: mvn clean test jacoco:report
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: empdb
        DB_USERNAME: elms_user
        DB_PASSWORD: elms_password

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./ELMS/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage

  # Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker Image (Test)
      uses: docker/build-push-action@v5
      with:
        context: ./ELMS
        file: ./ELMS/Dockerfile
        push: false
        tags: test-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend Docker Image (Test)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: test-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # PR Comment with Results
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [code-quality, test-coverage, build-validation]
    if: always()

    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { context } = require('@actions/github');
          
          let status = '✅ All checks passed!';
          let details = [];
          
          if ('${{ needs.code-quality.result }}' !== 'success') {
            status = '❌ Some checks failed';
            details.push('- Code quality checks failed');
          }
          
          if ('${{ needs.test-coverage.result }}' !== 'success') {
            status = '❌ Some checks failed';
            details.push('- Test coverage checks failed');
          }
          
          if ('${{ needs.build-validation.result }}' !== 'success') {
            status = '❌ Some checks failed';
            details.push('- Build validation failed');
          }
          
          const body = `
          ## 🔍 PR Validation Results
          
          **Status:** ${status}
          
          ${details.length > 0 ? '**Issues found:**\n' + details.join('\n') : ''}
          
          ### 📊 Check Summary:
          - **Code Quality:** ${{ needs.code-quality.result }}
          - **Test Coverage:** ${{ needs.test-coverage.result }}
          - **Build Validation:** ${{ needs.build-validation.result }}
          
          ### 🚀 Next Steps:
          ${details.length === 0 ? '✅ This PR is ready for review and merge!' : '❗ Please fix the issues above before merging.'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });